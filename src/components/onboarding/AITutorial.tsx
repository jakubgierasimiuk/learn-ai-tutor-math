import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { MessageCircle, User, ArrowRight, CheckCircle } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/hooks/useAuth';
import { supabase } from '@/integrations/supabase/client';

interface Message {
  type: 'user' | 'ai';
  content: string;
  isError?: boolean;
}

const tutorialScenarios = [
  {
    title: "Scenariusz 1: Nie rozumiem wyjaÅ›nienia",
    messages: [
      { type: 'ai', content: 'RozwiÄ…Å¼my rÃ³wnanie: 2x + 5 = 11. Najpierw odejmujemy 5 z obu stron.' },
      { type: 'user', content: 'Nie rozumiem dlaczego odejmujemy 5. MoÅ¼esz wyjaÅ›niÄ‡?' },
      { type: 'ai', content: 'OczywiÅ›cie! Chcemy zostaÄ‡ z samym x. Teraz mamy "2x + 5". Å»eby pozbyÄ‡ siÄ™ +5, robimy odwrotnÄ… operacjÄ™, czyli odejmujemy 5. Ale Å¼eby rÃ³wnanie byÅ‚o nadal prawdziwe, musimy to zrobiÄ‡ z obu stron. Czy teraz jest jasne?' },
      { type: 'user', content: 'Tak, teraz rozumiem. Co robimy dalej?' }
    ]
  },
  {
    title: "Scenariusz 2: PopeÅ‚niam bÅ‚Ä…d",
    messages: [
      { type: 'ai', content: 'Oblicz: (x + 3)Â²' },
      { type: 'user', content: 'xÂ² + 9', isError: true },
      { type: 'ai', content: 'WidzÄ™ bÅ‚Ä…d! ZapomniaÅ‚eÅ› o Å›rodkowym skÅ‚adniku. (x + 3)Â² = xÂ² + 2Â·xÂ·3 + 3Â² = xÂ² + 6x + 9. PamiÄ™taj wzÃ³r: (a + b)Â² = aÂ² + 2ab + bÂ². Chcesz, Å¼ebym wyjaÅ›niÅ‚ skÄ…d siÄ™ bierze ten wzÃ³r?' },
      { type: 'user', content: 'Tak, proszÄ™ wyjaÅ›nij!' }
    ]
  },
  {
    title: "Scenariusz 3: ProszÄ™ o dodatkowe przykÅ‚ady",
    messages: [
      { type: 'ai', content: 'Åšwietnie! RozwiÄ…zaÅ‚eÅ› poprawnie rÃ³wnanie x + 4 = 10.' },
      { type: 'user', content: 'MogÄ™ dostaÄ‡ wiÄ™cej podobnych przykÅ‚adÃ³w do Ä‡wiczenia?' },
      { type: 'ai', content: 'OczywiÅ›cie! Oto kilka podobnych rÃ³wnaÅ„: 1) x + 7 = 15, 2) x + 2 = 9, 3) x + 6 = 14. RozwiÄ…Å¼ je krok po kroku, a ja sprawdzÄ™ kaÅ¼de.' },
      { type: 'user', content: 'DziÄ™kujÄ™, zaczynam od pierwszego!' }
    ]
  }
];

export function AITutorial() {
  const [currentScenario, setCurrentScenario] = useState(0);
  const [currentMessage, setCurrentMessage] = useState(0);
  const [completed, setCompleted] = useState(false);
  const navigate = useNavigate();
  const { user } = useAuth();
  
  const scenario = tutorialScenarios[currentScenario];
  const message = scenario.messages[currentMessage];
  const isLastMessage = currentMessage === scenario.messages.length - 1;
  const isLastScenario = currentScenario === tutorialScenarios.length - 1;
  
  const handleNext = () => {
    if (isLastMessage) {
      if (isLastScenario) {
        setCompleted(true);
      } else {
        setCurrentScenario(prev => prev + 1);
        setCurrentMessage(0);
      }
    } else {
      setCurrentMessage(prev => prev + 1);
    }
  };
  
  const handleComplete = async () => {
    if (user) {
      await supabase
        .from('profiles')
        .update({ ai_tutorial_completed: true })
        .eq('user_id', user.id);
    }
    navigate('/onboarding/checklist');
  };

  if (completed) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-background via-primary/5 to-accent/5 flex items-center justify-center p-6">
        <Card className="w-full max-w-md p-8 text-center">
          <div className="mb-6">
            <CheckCircle className="w-16 h-16 text-success mx-auto mb-4" />
            <h1 className="text-2xl font-bold mb-3 text-foreground">
              Åšwietnie!
            </h1>
            <p className="text-muted-foreground mb-4">
              Teraz wiesz jak rozmawiaÄ‡ z AI-nauczycielem:
            </p>
            <div className="text-sm text-muted-foreground space-y-2 text-left">
              <p>âœ“ Pytaj o wszystko czego nie rozumiesz</p>
              <p>âœ“ AI cierpliwie wyjaÅ›ni kaÅ¼dy krok</p>
              <p>âœ“ BÅ‚Ä™dy sÄ… normalne - AI je naprawi</p>
              <p>âœ“ ProÅ› o dodatkowe przykÅ‚ady gdy potrzebujesz</p>
            </div>
          </div>
          
          <Button onClick={handleComplete} className="w-full" size="lg">
            Kontynuuj
          </Button>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-background via-primary/5 to-accent/5 flex items-center justify-center p-6">
      <Card className="w-full max-w-2xl p-8">
        <div className="text-center mb-8">
          <h1 className="text-2xl font-bold mb-2 text-foreground">
            Naucz siÄ™ rozmawiaÄ‡ z AI
          </h1>
          <p className="text-muted-foreground mb-4">
            {scenario.title}
          </p>
          <div className="text-sm text-primary font-medium">
            Scenariusz {currentScenario + 1}/{tutorialScenarios.length}
          </div>
        </div>

        <div className="mb-8">
          {/* Show all messages up to current one */}
          <div className="space-y-4 mb-6 max-h-96 overflow-y-auto">
            {scenario.messages.slice(0, currentMessage + 1).map((msg, index) => (
              <div
                key={index}
                className={`flex items-start space-x-3 ${
                  msg.type === 'user' ? 'justify-end' : 'justify-start'
                }`}
              >
                {msg.type === 'ai' && (
                  <div className="flex-shrink-0 w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center">
                    <MessageCircle className="w-4 h-4 text-primary" />
                  </div>
                )}
                
                <div className={`max-w-[80%] p-4 rounded-lg ${
                  msg.type === 'user' 
                    ? `${msg.isError ? 'bg-destructive/10 border border-destructive/20' : 'bg-accent/10'} text-foreground`
                    : 'bg-muted text-foreground'
                }`}>
                  <p className="text-sm">{msg.content}</p>
                  {msg.isError && (
                    <p className="text-xs text-destructive mt-1">âœ— BÅ‚Ä™dna odpowiedÅº</p>
                  )}
                </div>
                
                {msg.type === 'user' && (
                  <div className="flex-shrink-0 w-8 h-8 bg-accent/10 rounded-full flex items-center justify-center">
                    <User className="w-4 h-4 text-accent" />
                  </div>
                )}
              </div>
            ))}
          </div>
          
          {/* Key learnings for current message */}
          <div className="bg-primary/5 border border-primary/20 rounded-lg p-4 mb-4">
            <h4 className="font-medium text-sm text-primary mb-2">ðŸ’¡ Co widaÄ‡ w tym przykÅ‚adzie:</h4>
            <p className="text-xs text-muted-foreground">
              {currentMessage === 0 && "AI zawsze zaczyna od wyjaÅ›nienia"}
              {currentMessage === 1 && message.type === 'user' && "UczeÅ„ pyta gdy czegoÅ› nie rozumie - to Å›wietne!"}
              {currentMessage === 2 && "AI cierpliwie wyjaÅ›nia i pyta czy jest jasne"}
              {currentMessage === 3 && "UczeÅ„ potwierdza zrozumienie i pyta o dalsze kroki"}
              {message.isError && "AI Å‚agodnie koryguje bÅ‚Ä…d i wyjaÅ›nia prawidÅ‚owe rozwiÄ…zanie"}
              {message.content.includes("przykÅ‚ad") && "UczeÅ„ prosi o dodatkowe Ä‡wiczenia - AI chÄ™tnie je dostarcza"}
            </p>
          </div>
        </div>

        <div className="flex justify-center">
          <Button onClick={handleNext} className="flex items-center space-x-2">
            <span>
              {isLastMessage 
                ? (isLastScenario ? 'ZakoÅ„cz tutorial' : 'NastÄ™pny scenariusz')
                : 'NastÄ™pna wiadomoÅ›Ä‡'
              }
            </span>
            <ArrowRight size={16} />
          </Button>
        </div>
      </Card>
    </div>
  );
}